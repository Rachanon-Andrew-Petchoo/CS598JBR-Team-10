{"task_id": "HumanEval/118", "completion": "    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n", "result": "failed: name 'vowels' is not defined", "passed": false}
{"task_id": "HumanEval/78", "completion": "    return sum(1 for c in num if int(c, 16) in primes)\n", "result": "failed: name 'primes' is not defined", "passed": false}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    path = [0] * k\n    min_val = float('inf')\n\n        nonlocal min_val\n        if k == 0:\n            if total < min_val:\n                min_val = total\n            return\n        if total >= min_val:\n            return\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n:\n                path[k-1] = grid[nx][ny]\n                dfs(nx, ny, k-1, total + grid[nx][ny])\n\n    for i in range(n):\n        for j in range(n):\n            path[k-1] = grid[i][j]\n            dfs(i, j, k-1, grid[i][j])\n\n    return path\n", "result": "failed: unexpected indent (<string>, line 36)", "passed": false}
{"task_id": "HumanEval/157", "completion": "    sides = sorted([a, b, c])\n\n    # Check if the square of the largest side is equal to the sum of the squares of the other two sides\n    return sides[2]**2 == sides[0]**2 + sides[1]**2\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "completion": "", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/64", "completion": "    for char in s.lower():\n        if char in 'aeiou':\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count\n", "result": "failed: cannot access local variable 'count' where it is not associated with a value", "passed": false}
{"task_id": "HumanEval/148", "completion": "    if planet1 not in planet_order or planet2 not in planet_order:\n        return ()\n    start = planet_order.index(planet1)\n    end = planet_order.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planet_order[start+1:end])\n", "result": "failed: name 'planet_order' is not defined", "passed": false}
{"task_id": "HumanEval/33", "completion": "    divisible_by_three.sort()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = divisible_by_three.pop(0)\n    return l\n", "result": "failed: name 'divisible_by_three' is not defined", "passed": false}
{"task_id": "HumanEval/41", "completion": "    # The number of collisions is equal to the sum of the first n natural numbers.\n    # This is because each car will collide with n cars to its left and n cars to its right.\n    # The total number of collisions is therefore the sum of the first n natural numbers.\n    # This can be calculated using the formula for the sum of the first n natural numbers.\n    # The formula is n * (n + 1) / 2.\n    return n * (n + 1) // 2\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/75", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n\n    if len(factors) != 3:\n        return False\n\n    product = 1\n    for factor in factors:\n        product *= factor\n\n    return product == a\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/46", "completion": "        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(n - 4):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n", "result": "failed: unexpected indent (<string>, line 18)", "passed": false}
{"task_id": "HumanEval/138", "completion": "    for i in range(2, n, 2):\n        for j in range(2, n, 2):\n            for k in range(2, n, 2):\n                for l in range(2, n, 2):\n                    if i + j + k + l == n:\n                        return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "completion": "    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[-1:] + b[:-1]\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "completion": "    return -1\n    avg = (n + m) // 2\n    return bin(round(avg))\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/58", "completion": "", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/105", "completion": "    arr = [i for i in arr if 1 <= i <= 9]\n    arr.sort(reverse=True)\n    return [num2words[i] for i in arr]\n", "result": "failed: name 'num2words' is not defined", "passed": false}
{"task_id": "HumanEval/91", "completion": "    return sum(1 for sentence in sentences if sentence.strip().startswith('I'))\n", "result": "failed: name 'sentences' is not defined", "passed": false}
{"task_id": "HumanEval/81", "completion": "        'A+' if gpa == 4.0 else\n        'A' if gpa > 3.7 else\n        'A-' if gpa > 3.3 else\n        'B+' if gpa > 2.7 else\n        'B' if gpa > 2.3 else\n        'B-' if gpa > 2.0 else\n        'C+' if gpa > 1.7 else\n        'C' if gpa > 1.3 else\n        'C-' if gpa > 1.0 else\n        'D+' if gpa > 0.7 else\n        'D' if gpa > 0.0 else\n        'D-' if gpa == 0.0 else 'E'\n        for gpa in grades\n    ]\n", "result": "failed: unexpected indent (<string>, line 27)", "passed": false}
{"task_id": "HumanEval/15", "completion": "", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False\n", "result": "passed", "passed": true}
