{"task_id": "HumanEval/118", "completion": "    \"\"\"You are given a word. Your task is to find the closest vowel that stands between\n    two consonants from the right side of the word (case sensitive).\n\n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition.\n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    word = word[::-1]\n    for i in range(len(word)):\n    if word[i] in vowels:\n    return word[i]\n    return \"\"", "result": "failed: expected an indented block after 'for' statement on line 33 (<string>, line 34)", "passed": false}
{"task_id": "HumanEval/78", "completion": "    hex_num = \"0123456789ABCDEF\"\n    count = 0\n    for i in num:\n    if int(i, 16) in [2, 3, 5, 7, 11, 13]:\n    count += 1\n    return count", "result": "failed: expected an indented block after 'for' statement on line 22 (<string>, line 23)", "passed": false}
{"task_id": "HumanEval/129", "completion": "    # TODO: implement this\n    return []", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/157", "completion": "    if a > b and a > c:\n    if a**2 == b**2 + c**2:\n    return True\n    else:\n    return False\n    elif b > a and b > c:\n    if b**2 == a**2 + c**2:\n    return True\n    else:\n    return False\n    elif c > a and c > b:\n    if c**2 == a**2 + b**2:\n    return True\n    else:\n    return False\n    else:\n    return False", "result": "failed: expected an indented block after 'if' statement on line 12 (<string>, line 13)", "passed": false}
{"task_id": "HumanEval/2", "completion": "    return number % 1", "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "completion": "    return sum(1 for c in s if c in \"aeiou\")", "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/148", "completion": "    '''\n    There are eight planets in our solar system: the closerst to the Sun\n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2.\n    The function should return a tuple containing all planets whose orbits are\n    located between the orbit of planet1 and the orbit of planet2, sorted by\n    the proximity to the sun.\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n    planets = ('Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune')\n    if planet1 not in planets or planet2 not in planets:\n    return ()\n    else:\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if planet1_index > planet2_index:\n    return tuple(planets[", "result": "failed: expected an indented block after 'if' statement on line 34 (<string>, line 35)", "passed": false}
{"task_id": "HumanEval/33", "completion": "    l_copy = l.copy()\n    for i in range(len(l)):\n    if i % 3 == 0:\n    l_copy[i] = sorted(l[i:i+3])\n    return l_copy", "result": "failed: expected an indented block after 'for' statement on line 13 (<string>, line 14)", "passed": false}
{"task_id": "HumanEval/41", "completion": "    return n * (n - 1) // 2", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/75", "completion": "    pass", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/46", "completion": "    \"*** YOUR CODE HERE ***\"\n    if n == 0:\n    return 0\n    elif n == 1:\n    return 0\n    elif n == 2:\n    return 2\n    elif n == 3:\n    return 0\n    else:\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n    e = a + b + c + d\n    a, b, c, d = b, c, d, e\n    return e", "result": "failed: expected an indented block after 'if' statement on line 19 (<string>, line 20)", "passed": false}
{"task_id": "HumanEval/138", "completion": "    if n % 2 != 0:\n    return False\n    else:\n    return True", "result": "failed: expected an indented block after 'if' statement on line 9 (<string>, line 10)", "passed": false}
{"task_id": "HumanEval/154", "completion": "    if len(a) != len(b):\n    return False\n    if a == b:\n    return True\n    for i in range(len(a)):\n    if a[i:] + a[:i] == b:\n    return True\n    return False", "result": "failed: expected an indented block after 'if' statement on line 12 (<string>, line 13)", "passed": false}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n    return -1\n    else:\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    binary_avg = bin(rounded_avg)\n    return binary_avg\n\n\n    print(rounded_avg(1, 5))\n    print(rounded_avg(7, 5))\n    print(rounded", "result": "failed: expected an indented block after 'if' statement on line 13 (<string>, line 14)", "passed": false}
{"task_id": "HumanEval/58", "completion": "    return sorted(set(l1) & set(l2))", "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "completion": "    # your code here\n    pass", "result": "failed: Error", "passed": false}
{"task_id": "HumanEval/91", "completion": "    return S.count(\"I\")", "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/81", "completion": "    pass", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n + 1))", "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "completion": "    if sum(q) <= w and q == q[::-1]:\n    return True\n    else:\n    return False\n\n\n    print(will_it_fly([1, 2], 5))\n    print(will_it_fly([3, 2, 3], 1))\n    print(will_it_fly([3, 2, 3], 9))\n    print(will_it_fly([3], 5))", "result": "failed: expected an indented block after 'if' statement on line 20 (<string>, line 21)", "passed": false}
