{"task_id": "HumanEval/118", "completion": "    vowels = \"AEIOUaeiou\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i]\n    return \"\"\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/78", "completion": "    primes = ['2', '3', '5', '7', 'B', 'D']\n    return sum(1 for digit in num if digit in primes)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/129", "completion": "    n = len(grid)\n    dp = [[[float('inf')] * (k + 1) for _ in range(n)] for _ in range(n)]\n    dp[0][0][0] = grid[0][0]\n    moves = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    for l in range(1, k + 1):\n        for x in range(n):\n            for y in range(n):\n                for dx, dy in moves:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < n and 0 <= ny < n:\n                        dp[x][y][l] = min(dp[x][y][l], dp[nx][ny][l - 1] + grid[x][y])\n    min_val = min(dp[n - 1][n - 1])\n    path = []\n    x, y = n - 1, n - 1\n    for l in range(k, 0, -1):\n        for dx, dy in moves:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and dp[nx][ny][l - 1] + grid[x][y] == min_val:\n                path.append(grid[x][y])\n                x, y = nx, ny\n                break\n    path.append(grid[0][0])\n    return path[::-1]\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/157", "completion": "    # The Pythagorean theorem states that in a right-angled triangle, the square of the hypotenuse (the side opposite the right angle)\n    # is equal to the sum of the squares of the other two sides.\n    # We can use this theorem to solve the problem.\n    # First, we need to sort the sides in ascending order to ensure that a^2 + b^2 = c^2 holds.\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/64", "completion": "    vowels = \"aeiou\"\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    if s[-1].lower() == \"y\":\n        count += 1\n    return count\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/148", "completion": "    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        start = planets.index(planet1)\n        end = planets.index(planet2)\n        if start > end:\n            start, end = end, start\n        return tuple(planets[start+1:end])\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/33", "completion": "    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n    divisible_by_three.sort()\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = divisible_by_three.pop(0)\n    return l\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/41", "completion": "    return 0\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/75", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n    if len(factors) == 3 and factors[0] * factors[1] * factors[2] == a:\n        return True\n    else:\n        return False\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(n - 4):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/138", "completion": "    for i in range(2, n, 2):\n        for j in range(2, n, 2):\n            for k in range(2, n, 2):\n                for l in range(2, n, 2):\n                    if i + j + k + l == n:\n                        return True\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/154", "completion": "    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[-1:] + b[:-1]\n    return False\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n    else:\n        avg = (n + m) // 2\n        return bin(round(avg))\n", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/58", "completion": "    return sorted(list(set(l1) & set(l2)))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/105", "completion": "    num_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = []\n    for num in arr:\n        if 1 <= num <= 9:\n            result.append(num_names[num-1])\n    result.sort(key=lambda x: num_names.index(x), reverse=True)\n    return result\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/91", "completion": "    return S.count('I')\n", "result": "failed: Test 2", "passed": false}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/15", "completion": "    return ' '.join(str(i) for i in range(n+1))\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/72", "completion": "    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False\n", "result": "passed", "passed": true}
